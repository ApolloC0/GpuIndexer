package GpuIndex.App;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class GpuConsultantApp {
    public static void main(String[] args) {
        try {
            System.out.println("\n");
            System.out.println(" ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä             ‚£§‚£Ñ‚¢ò‚£í‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚£Ω‚£ø‚£õ‚†õ‚¢õ‚£ø‚£ø‚°ø‚†ü‚†Ç‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚°Ü‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†ú‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø‚†à‚£ø‚£ø‚£ø‚°è‚£†‚°¥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚£†‚£ø‚£ø‚£ø‚°ø‚¢Å‚£¥‚£∂‚£Ñ‚†Ä‚†Ä‚†â‚†â‚†â‚†Ä‚¢ª‚£ø‚°ø‚¢∞‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚¢ø‚£ø‚†ü‚†ã‚†Ä‚†à‚†õ‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚°á‚¢∏‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
            System.out.println(" ‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ø‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä" +

                    "GPU Index Manager By ApolloC0 (Manuel Rivas)");
            System.out.println("\n");
            System.out.println("üöÄ Iniciando Indexador de GPUs...");
            System.out.println("‚ïê".repeat(50));

            SpringApplication.run(GpuConsultantApp.class, args);

        } catch (Exception e) {
            /*
             * SISTEMA DE MANEJO DE ERRORES COMENTADO
             *
             * Este bloque estaba dise√±ado para capturar y mostrar errores detallados
             * durante el inicio de la aplicaci√≥n. Inclu√≠a:
             *
             * 1. StackTrace completo de la excepci√≥n
             * 2. An√°lisis de causas ra√≠z con m√∫ltiples niveles
             * 3. Informaci√≥n estructurada de cada excepci√≥n en la cadena
             *
             * Se ha comentado para mantener un inicio m√°s limpio, pero puede
             * ser reactivado para debugging en entornos de desarrollo.
             *
             * System.err.println("\n‚ùå ERROR AL INICIAR LA APLICACI√ìN");
             * System.err.println("‚ïê".repeat(50));
             * e.printStackTrace();
             *
             * // Imprimir todas las causas
             * Throwable cause = e;
             * int level = 0;
             * while (cause != null) {
             *     System.err.println("üîç CAUSA " + level + ": " + cause.getClass().getSimpleName());
             *     System.err.println("üìÑ MENSAJE: " + cause.getMessage());
             *     System.err.println("‚îÄ".repeat(50));
             *     cause = cause.getCause();
             *     level++;
             * }
             */

            // Mensaje simplificado para el usuario final
            System.err.println("\n‚ùå Error: No se pudo iniciar la aplicaci√≥n");
            System.err.println("üí° Contacta al soporte t√©cnico si el problema persiste");
            System.exit(1);
        }
    }
}